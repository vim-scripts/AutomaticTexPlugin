			      *automatic-tex-plugin* *atp* 
			Introduction to Automatic (la)TeX Plugin
				by Marcin Szamotulski
			----------------------------------------

If you found this plugin useful, you are cordially invited to write to me
mszamot@gmail.com, this is my first vim plugin, and its a great pleasure 
to get even the smallest message.


					Abstract
					========	

This is a new plugin for vim to comfortably write TeX (LaTeX, PdfLaTeX)
documents, which provides functionality not met in other plugins.  It makes
you FREE from compiling procedure, making this process automatic using
autocommands. It also provides useful mappings and ways to analyse your .log
file.  To have full functionality you need: texloganalyser (a perl program
written by Thomas van Oudenhove) and pdffonts available in the package
app-text/poppler-utils (at least in Gentoo). Another good tool is texdoc,
which is a part of texlive these day standard TeX distribution for Linux.

We provide a powerful function to search in bibliographic files (bib files).

                                                		*atp-help-toc*
|atp-installation| 	Installation								
|atp-functions| 	Functions
|atp-bibsearch|		Searching in bib files
|atp-configure| 	How to configure to your needs 
|atp-mappings|  	Mappings and Commands
|atp-errors|  		Error handling
|atp-requirements|  	Requirements
|atp-viewers| 		Note about viewers (including inverse and reverse searching)
|atp-color-highlight|	Colors and syntaxes defined
|atp-remarks|  		Final remarks
|atp-copy-rights|	Copy Rights

	
Note on usage: type :help atp<CTR>d to see all the helptags. To see help tags
for all the defined functions :help atp*()<CTR>d, mappings: :help atp-map<CTR>d

================================================================================
Installation                               			*atp-installation*
>
	" :filetype plugin on is required to run this plugin, see
	" |:filetype-plugin-on| and |:filetype-indent-on| if you want to have
	" automatic intendation for TeX files.
<
To install you just need to copy tex.vim file to ~your ~/.vim/ftplugin/
directory copy this help file to ~/.vim/doc and then run :helptags ~/.vim/doc
and that's all, now you can just type your story ... :)


================================================================================
Functions                               			*atp-functions*

The main function is not seen by the user (it is called s:compiler, for those
who want to read the plugin). It executes tex compiler specified by the
variable b:texcompiler after checking if the file has changed. It is executed
as an autocommand by the line:
	au! CursorHold $HOME*.tex silent call 's:auTeX()'
where s:auTeX() is a simple function which calls s:compiler.
As you can see it will run if a key is not pressed during time defined by
option 'updatetime' (see |CursorHold|) in the normal mode. If you type in
insertmode the file wan't be compiled (and that's alright as you can be in the
middle of your very long formula). The value of 'updatetime' which works fine
is around 1000ms ('updatetime' is set in miliseconds). The function s:auTeX() 
if finds a difference between what is on you hard drive and what is in your
buffer runs tex compiler (configured in b:texcompiler) with options:
	-output-directory 
	-jobname
which points to a unique temporary file in vim temporary directory (using the
function 'tempname()' (see |tempname()|. If you are concerned with security
reasons read also: |shelltemp|.

You can switch off/on the function s:auTeX by pressing <S-F5>  or by letting
the local to buffer variable b:autex=1 (on) b:autex=0 (off). It is useful in
some situations. The key <S-F5> calls the function ToggleAuTex() which sets
the variable b:autex and issue a message. You can also set this variable to 0
for some files that are not supposed to be processed, for example:
    au BufRead texmf/*.tex let b:autex0

The second important variable b:texcompiler (see |b:texcompiler|) configures
if you use TeX, PdfTeX, LaTeX, PdfLaTeX and it should point to the program
name so please do not use capital letters.

Next variable to set is b:outdir (see |b:outdir|). It configures where TeX
will put the output and where viewer and log analyzing tools can find
appropriate files. 

The last top most important variable is |g:keep| which is a list of extensions,
by default it is
	let g:keep = ["log","aux","toc","bbl"]
Files with this extension will be copied from b:outdir to the temporary
directory with appropriate name to be used when (La)TeX is compiling. (log file
will be only copied after it is created, other files will be copied back and
forth between you b:outdir and the temporary directory)

There is also a variable which stores the last command which executed
your tex compiler, see |b:texcommand|.   

The last remark is that it is convenient to see if tex is running, if you are
using a simple window manager like DWM or WMII or some others you can do that
in your .xinitrc file. If you are using more complex window manager (Gnome,
KDE) you can use the command GPID (or which is mapped to \g) which returns pid
of |b:texcompiler| if it runs. The vim status line could be used for that but
it seems to be to slow and the screen gets messy (at least for me).

If you have defined a function with the same name it wan't be overwritten.
You can check where the function was defined by the command
	:verbose function TEX
the last component is the name of the function (without () at the end).	

Below I explain functions which are defined:
/all of them do not have any arguments/

TEX([runs])						*atp-TEX()*
map \l,imap \ll, :TEX 

	If anyway you want to run TeX yourself but you do not want to see the
	output this is the right tool. This runs TeX in 'nonstopmode'. You can
	specify an argument 'runs' which tells how many consecutive runs of
	TeX you need (this is important if you want to compile Table of
	Contents, or index, or the bibliography (see |atp-Bibtex()|)

	If b:openviewer=1 and there current viewer (b:Viewer) is not running on the
	output file then this function will open a viewer. By default b:openviewer=0
	and this feature is disabled. 

	The command :2TEX will run :call TEX(2), :TEX 3 do :call TEX(3), and
	:2TEX3 will resolve to :call TEX(3).

	It is useful when you want to make the outline (using hyperref
	package) of your article in pdf files, the tex file has to be
	'sourced' twice. To make the bibliography you can use |atp-Bibtex()|.

VTEX([runs])						*atp-VTEX()*
map <F5>,imap <F5>, :VTEX 
	
	Verbose TeX, if you want to see the log file after tex compiler is
	called. This runs TeX in the errorstop mode. 

	If b:openviewer=1 and there current viewer (b:Viewer) is not running
	on the ouput file then this function will open a viewer. By default
	b:openviewer=0 and this feature is disabled. 

	If the variable 'runs' is specified is given then VTEX will call the
	tex compiler as many times as given. Only the last time is with
	errorstop mode.
	
	The command :2VTEX will run :call VTEX(2), :VTEX 3 do :call VTEX(3), and
	:2VTEX3 will resolve to :call VTEX(3).

Bibtex([debug])						*atp-Bibtex()* 
map \b, :Bibtex, :Bibtex v
	This function will call bibtex to produce the bibliography file
	(.bbl). If in |b:outdir| there is no 'aux' file it first calls tex
	compiler. After the 'bbl' file is produced two consecutive runs of tex
	compiler are called to make the bibliography.

	If you specify any value to the debug variable then then this function
	will be called in verbose mode (only the last time tex compiler will
	run in errorstop mode). This gives you the chance to see the output of
	bibtex command for a second. The command :Bibtex v is associated to
	this behaviour. If you want to just run bibtex see the next function.

	The command :Bibtex  will :call Bibtex(), while :Bibtex v
	(and :Bibtex <anything>) will :call Bibtex(1)

SimpleBibtex()						*atp-SimpleBibtex()*
map \sb, :SBibtex
	This calls bibtex on the aux file in your |b:outdir| directory and
	shows you the output. It is useful if you are debugging your
	bibliography database. 
	
ViewOutput()						*atp-ViewOutput()*
map \v,map <F3>, imap \v, imap <F3>  
	You would like to see what you are editing use this function. It will
	use the program defined in the variable b:Viewer. See |b:Viewer|,
	|b:XpdfServer|, |b:XpdfOptions|. When there is no output file it will run
	TeX and open the file. Read more about particular viewers
	(inverse/reverse searching) in |atp-viewers|. 

BibSearch({pattern},{flag})				see |atp-BibSearch|
:BibSearch
	Finds bibentries in bibfiles given in yout tex file, which match the
	pattern the output is configurable by the flag argument see
	|atp-bibflags|.

BibChoose({pattern},{flag})				see |atp-BibChoose|
:BibChoose
	Finds like BibSearch and let you copy the bib key directly to your tex
	file (after the curent cursor position) or to a choosen register see
	|atp-bibchoose-register|.

FindBibFiles({bufname})					*atp-FindBibFiles()*
:FindBibFiles

	This updates the variables s:bibfiles, s:allbibfiles,
	s:notreadablebibfiles (showed by ShowOptions command). Finds all bib
	files defined in all '\bibliography' commands. For more about the
	above variables read |atp-variables-bib|. This function is called
	internally be the script functions BibSearch/BibChoose/ShowOptions.
	The command :FindBibFiles finds bib files in the current buffer. 

							*atp-FindInputFiles()*
FindInputFiles([bufname])
:FindInputFiles [bufname]
	This function finds all the input files, i.e. files put after the
	tex commands: '\input', '\include' or '\includeonly'. And prints the
	reuslt. 
	The function and the command have one optional argument - the buffer
	name. By default it searches for input files in the current buffer.
	The bufername complition is set, hence you can use <Tab> to choose the
	bufername as the argument of the command.


							*atp-EditInputFile()*
EditInputFile([bufname])
:EditInputFile [bufname]
	This function finds input files (using the function FindInputFiles()
	in the current buffer and let you choose one to edit.
	window. 

	The argument is optional and works as in |atp-FindInputFiles()|.

	The input file may contain white spaces, but then has to be quoted
	with '"' (this is a latex requirement).

	Input files are searched in the |b:outdir| directory, if not found
	there then in the directory |g:texmf|. The default value is 
	g:texmf=$HOME/texmf, which is the default value of local texmf tree in
	texlive.

OpenLog()						*atp-OpenLog()*
map <F6>l, imap <F6>l
	Opens log file in a new tab with two options (which are set
	locally): ruler, nospell.	

	You can also use the standard command (distributed with vim)
	":Texplore" to see log,aux,... files.

Delete()						*atp-Delete()*
map <F6>d
	Delets the files produced by TeX wich extensions belongs to
	g:texextensions (see |g:texextensions|). It removes not taking care
	about the name, i.e. it runs like: rm *.out.

Print()							*atp-Print()*
map \p
	It will run lpr command and append to it the options defined in the
	variable g:printeroptions. It prints the pdf file if you are using
	Pdf(La)TeX  or the dvi file if you are using (La)TeX. Depneding, what
	you have in |b:texcompiler|.

ShowOptions()						*atp-show-options* *atp-ShowOptions()*
:ShowOptions, :ShowOptions v 
	This will show values of values that you use. If you specify any
	argument additionaly the deafult values will be shown is suqare brackets.
>
		:ShowOptions v
<		
							*atp-TOC()*	
TOC()
map T, :TOC
	Shows Table of Contents of your document. It do not yet support the
	started version of chapter, section,... environemnts. It opens new
	window in which you can use the mappings: 

		'e' 	to echo the line from your tex file
		'y' 	to yank the label of the chapter under the curosor
				to a register, if it exists,
	 	'p' 	to paste it directly to your tex file (just after the
				current cursor position), 
		's'	to show the context of the label: it splits the window
				with your tex source file and sets the current
				line to the line of the label
		'q' 	to quit, and finaly, 
		<Enter> to go to the chapter under the cursor and close ToC.
		<space> to go to the chapter under the cursor but leave ToC
			open.

	There are also commands: ':C' and ':P', which do the same as 'c' and
	'p' mappings. They all call the function 'Yank(<where>)', the argument
	<where> can be one of: '@<register name>' or 'p'.  

	TOC() supports many eddited files. For example if you have in your
	buffer list two files a.tex and b.tex this command will produce table
	of contents of both files. If you have just one opened window
	(excluding the ToC window) then pressing <space>, <enter>, p and q
	will take you to the right buffer (which will be read if is unloaded
	or hidden): for example if you split a window then <space>, <enter>,
	p, q will take you to the window from which you are comming. If you
	have to windows with two different buffers loaded they will act on 
	the window with the matching buffer name.

							*atp-Labels()*
Labels()
map \L, :Labels
	Shows labels defined in your file. You can also use the mappings
	'e','c','p','s','q' and <Enter> as above.

	If you forget what are these mappings, write map in the TOC or LABELS
	window.

	For good support of multiple opened files one have to wait a moment.
	
							*atp-SetOutDir*	
:SetOutDir
	This is a command wich sets b:outdir variables and |'errorfile'| option.
	See |b:outdir| for the default value.

							*atp-SetErrorFile*
:SetErrorFile
	If you change |b:outdir| variable and you want to update the
	|'errorfile'| option use this command. It will show you the value to
	which |'errorfile'| was set. 

================================================================================
Searching in bib files 		                        *atp-bibsearch*

		
		____________________________
		Naming Convensions:	
		@article{<label>,					\	
			author = { .... },		<-- bibentry    | 
			title  = { .... },				 > bibfield
			journal= " .... ",				|
		}							/	

			article 		<-- bibfield keyword 
			author,title,...	<-- bibentry label 	
			<label>			<-- bibfield label 	

One more function is provided which searches the bib files for bibfields, 
and for the bibfield labels for the latex command \cite{}.

BibSearch([pattern],[flags])				*atp-BibSearch* 
BibChoose([pattern],[flags])				*atp-BibChoose*

	The function BibChoose allows you to copy the keyword of the whole
	bibentry directly to the file or to the register, for the useg see
	|atp-bibchoose:input|.

	Both takes two arguments (the last one is optional), first one is the
	pattern to match against each line of the bibliographic files supplied
	in the commands \bibliography (if there are several names,please do
	not add a white space ' ' after ',' unless the file name begins with a
	space. i.e.
>
 "	\bibliography(Mathematics, Physics,/home/user/Bibliography)
< 
	then the plugin will understand that the names of the bib files are
	'Mathematics.bib', ' Physics.bib' and '/home/user/Bibliography.bib'.

								*atp-bibsearch-patterns*
								*atp-bibsearch-examples*
	Each line of every bib file found in your tex docummnet will be
	matched against the pattern, for example 
>
 "	if pattern='author.*Grothendieck'
<
 	will result in all the bibliographic positions which in one line have
	the words 'author' and 'Grothendieck' (in most cases it means that you
	will see only works of Grothendieck). Another example:
>
 "	if pattern='author.*Joayl\|Galois Theory'
<
	will result in all bibfields which author is Joyal or 
	which includes the words 'Galois Theory' (which by the way apear in
	many article/book tiles):	
>
 "	if pattern='author.*Joayl\|title\p*Galois Theory'
<
	This will match against all bibentries written by Joyal or which title
	includes the word 'Galois Theory'.
> 	
 "		:call BibSearch('author.*Joyal\&.*Tirney')	
<	
	will find all the bibentries which were written by Joyal and Tirney
	(and maybe somebody else). 

	For now, there is no possibility to filter bibliographic entries which
	both match a pattern in separate lines, i.g. to show all bibentries
	written by Joyal on 'Descent Theory'.

	Before a match, all '{', and '}' are deleted from the line of the bibfile.
	But you will see them in the output (what can be useful for debugging
	errors in bibfiles)

	Note that in vim patterns should be quoted using '...' not "...".   

	Further examples are supplied after the next section
	|atp-bibflags-examples|, which describes other functionalities
	of the BibSearch/BibChoos functions.

								*atp-bibsearch-flags*
								*atp-bibflags*
	The first optional argument [flags] chooses what and in which order
	you want to see the  bibentries found (entries are listed in
	the order they appear in bib file).  Flag is a word made of letters.
	There are three kinds of flags: entry flags which mathes againts
	labels of bibentries, like author, title, etc..., and keyword flags: which
	matches agains keywords of bibfields: @article, @book, @techreport,
	etc...  and two special flags 'All' and 'L'. A flag is a word on
	letters:
>
 "		a  - author
 " 		e  - editor
 " 		t  - title
 " 		b  - booktitle
 " 		j  - journal
 " 		s  - series
 " 		y  - year
 " 		n  - number
 " 		v  - volume
 " 		p  - pages
 " 		P  - Publisher
 " 		N  - Note
 " 		S  - School
 " 		h  - howpublished
 " 		o  - organization
 "		u  - url	
 "		H  - Homepage	
 "any other letter - do not show anything but the first line of bibentry 
 "		@a - article 						/@article/
 "		@b - book or booklet 					/@book,@booklet/
 "		@B - Booklet 						/@booklet/	
 "		@c - incollection 					/@incollection,@inbook/
 "		@p - proceedings, inproceedings, conference   		/@proceedings,@inproceedings,@conference/
 "		@m - misc 						/@misc/
 "		@M - Manual 						/@manual/
 "		@t - master or PhD thesis  				/@masterthesis,@phdthesis/
 "		@T - Techreport 					/@techreport/
 "		@u - unpublished  					/@unpublished/		
 "		All - all flags						(see |atp-bibflags:all|)		
 "		L   - last flags					(see |atp-bibflags:last|)		
<

	Examples:
>
 "		tayu@a		--> show the entries: tile, author, year, url of matching articles.
 "		baeP@b		--> show the entries: booktitle, author, editor, 
 " 							publisher of matching books (@book,@booklet).
< 
	If flags '@.' are filtered out, if one do not belongs to the one above
	then it is deleated. You can see which flags are defined using
	ShowOptions function/command (they are listed as Available
	KeyWordFlags).
								*atp-g:defaultbibflags*
								*atp-bibflags:default*
	The default flag is stored in the global variable g:defaultbibflags and is
	equal to 'tabejsyu'. This means that the ouput for each bibfield found 
	will include the 
		title
		author
		booktitle
		editor
		journal 
		series
		year
	if title,author,... are specified in the bibliography for the given
	position. If there are many position which match you can set flags to
	be as simple as possible to include more lines on the screen. For
	example 'tabe' is quite reasonable (note that all bibentries are
	matched separately, i.e. if a bibfield has both 'title' and 'booktitle'
	bibentries it will give you both of them.

								*atp-bibsearch-show-only-keys*
	If you just want to list just the lines with bibfields keywords:
	@article{, @book{, etc. supply a flag which do not belongs to
	'g:defaultallbibflags', for example 'X', or 'X@a'
	
								*atp-bibflags:+*
	You can also specify flags with '+', for example: 
>	
 "	flags='+p'
 "	flags='+@b'
<
	This feature ADDS FLAGS TO THE DEFAULT VALUE defined in
	|g:defaulbibflags|. The first will result in showing the default
	entries and the page number, the second will result in showing only
	books with the default bibentries. You can specify as many additional
	flags as you wish. 
								*atp-bibsearch-output*
	Note that the function shows the line with database file name if
		there are entries in this bibliography 
		which match the pattern
	thus,for example, if you specify the flag '@a' and you see the line
	with database file name, but you do not see any bibfield under, then
	in this database there are bibfields which match but these are not
	articles. 	
	
								*atp-bibflags:all*
								*atp-g:defaultallbibflags*
	The flags='All' is a synonim of flag=g:defaultallbibflags which by default is
	equal to'tabejfsvnyPNSohiuHcp' i.e. all flags in this order. If you
	add your own flag you should change this global variable. You can add to
	this flag any flag which contains '@' (see |atp-bibsearch-flags|) by
	the plus operator, i.e. All+@a@b or +@aAll will give the same result.

								*atp-bibflags:last*
								*atp-b:lastbibflags*	
	The variable 'b:lastbibflags' stores the recently used flags. The flag
	'L' sets the flags for this search to the value of 'b:lastbibflags'.
	You can write '+L@a', '+L@a', 'L@a' or '@aL' but not '+@La', if you
	want to add some flags to previous searches. Next time the flag 'L'
	will change the meaning (i.e. it is really the last time not earlier
	:) However, there is no '-' :( '-@aL' could be helpful.
	 
	The variable 'b:lastbibflags' is not changed when you use the 'All'
	flag.

								*atp-bibflags:add-flag*
	You can add your own flags but not keyword flags (i.e. @a,@b,...).
	Just add an entry to the dictionary g:bibflagsdict. (:ShowOptions v to
	see its current value), For example
>    
 "    let g:bibflagsdict=extend(g:bibflagsdict, { '<oneletter>' : [ '<bibentryname>': '<how to show>'] })
< 
    	where, <oneletter> is the flag to use, it must be different from the
	dfined flags, <bibentry_name> is a lowercase bibentry name, like
	'title', 'url', etc., <how to show> if you want to have a nice output
	put the bibentry name and that much of white spaces to get 13 strings.

		
								*atp-bibchoose-register*
	The function/command BibChoose ask you for the number of the biblabel to
	copy to your file (after the current cursor position) or to a
	specified register.

	    If you give just a number, e.g. '12', then the bibfield label of this
	    bibfield will be inserted after the cursor position, if you
	    specify number followed by a register name, i.g. '12e', '12+',
	    '12-', then the label will be copied to this register. Registers
	    which you can use are [a-z*+-].

	    Press <Enter> if you do not want to copy anything.

								*atp-bibsearch-highlight*
	The colours of the output are set using 'echohl' command, the groups which
	are in use are:
		
 		highlight link BibtexFileNames 		Title	
 		highlight link BibtexLabels		ModeMsg
 		highlight link BibtexMatch		WarningMsg
 		highlight link BibtexGeneral		Normal
 
	In your colour file (~/.vim/color/*.vim) you can set other colours.
	See |highlight| or just read a colour file. For example, this is a
	nice set of colours for dark background 
		
 		highlight BibtexFileNames  cterm=none      ctermfg=161 	ctermbg=233
 		highlight BibtexLabels	   cterm=bold	   ctermfg=90	ctermbg=233
		highlight BibtexMatch	   cterm=none      ctermfg=40  	ctermbg=233
		highlight BibtexGeneral    cterm=none      ctermfg=255	ctermbg=233

	Note that each message is echoed using the 'echomsg' command, and thus
	it is added to the |message-history|. And thus, previous searches are
	available using the :mes (see |:messages|) command.

	There are two commands to make the life easier:
								*atp-BibChoose-command*
							 	*atp-BibSearch-command*
:BibSearch [pattern] [flag] 
:BibChoose [pattern] [flag] 
	which do what you expect. The arguments should not be quoted and
	separated by a white spaces (if you want to include a white space use
	'\ '), for more see |f-args|. If you do not provide any argument then
	all entries of all bibfiles will be shown. Examples:

								*atp-bibflags:examples*
	Some examples:
>
 "	:BibSearch 
<				this is a tip how to show all bibfields with
				the default flags
>
 "	:BibSearch @ yt	
<				this is a tip how to show all bibfields with
				different flags than the default ones, which
				is equivalent to:
>
 "      :call BibSearch('','yt')
< 
>
 "	:BibSearch title[\s.]*Galois Theory  aetb
<
	The next one shows all bibfileds which were written by Joyal and
	Tirney (and mayby somebody else).
> 	
 "	:BibSearch 'author.*Joyal\&.*Tirney'
<	

								*atp-bibsearch-variables*
								*atp-variables-bib*	
SOME VARIABLES:
	All the values of important variables can be shown by ShowOption
	command.

								*atp-b:bibfiles*
b:bibfiles
	This variable is a list and you can put here additional bib files.
	They will be parsed by the BibSearch/BibChoose functions.
s:bibfiles
	This variable is a list which stores bib files found in your tex
	files and which are readable. It is set up when you first run of the commands:
	BibSearch/BibChoose/ShowOptions. Its value is produced by the
	functions FindBibFiles({bufname}).
s:allbibfiles 
	this is a sum of found bibfiles the locally defined b:bibfiles, which
	not necessarily are readable.
s:notreadablebibfiles
	guess what :)



-----------------------------------------------------------------------------------
								*atp-bibsearch-bugs*
	Please do not hesitate to report any bug to me:
	mszamot@gmail.com 							
	
	The algorithm will work only if all kind of bibentries of your bibfile
	are included in the list g:bibentries. However, changing just this
	variable is not enough. In that case the search engine (function
	s:search) will produce correct output, but the function which
	displays found entries, will not know how to work with the new
	entries. One would have to also add an entry to the dictionary
	'g:bibflagsdict'. If it is the case, please let me know:
	mszamot@gmail.com  

	As you can see entries of the type '@string' which can be used in bib
	files are not supported (i.e. there is no function which substitutes
	the variables defined in @string to their values), but it is doable.
			@string{ Name = Value }
			
------------------------------------------------------------------------------------	
	Comments: for a bibfile with over 16000 lines and 1675 entries, it
	took on my computer (AMD Core 2Duo 1.9Ghz) 25.5s to find all entries,
	with the command ':BibSearch . All' and 1s to show results (the
	longest loop took over 100000 times). However to find in this database
	one entry with default flags (:BibSearch <Name>) it took 2.84s
	(exactly 79 matching bibfields), and to display them another 0.6s. 

	If for you the algorithm is too slow, there is a way to make it more
	efficient: the problem with when every line is matched: when
	we are in line x we go back to find the nearest line of the form
	@article{, @book{, etc., if we find it we go to line x+1 and do it
	once again. We could remember previous line numbers and test if we
	already have done the calculations. This can avoid  long loops.

================================================================================
How to configure to your needs                          *atp-configure*
							*atp-variables*
There are several options you can set, and they might be set in your vimrc
file, unless you want to use the default, which I provide below.

All buffer variables (see |b:var|), i.e. these which name begins with "b:" can
be should be set in you vimrc file. The best way to do that is by using
autocommand:
	au BufReadPre *.tex let b:texcompiler="latex"
If you put just let b:texcompiler, this will also work but only open vim from
terminal (not when you want to start edditing next buffer). 

let b:texcompiler="pdflatex" 					*b:texcompiler*
	Used by functions: TEX() (map \l, imap \l), VTEX() (map <F5>, imap <F5>)

	You can set it to latex, tex, luatex, and so on and possibly to
	lilypond. 

let b:texoptions=""
	If you want to set some additional options to your texcompiler, note
	that, -jobname, -output-directory, -mode, are already used. You can
	use this to make reverse searching with xdvi see |atp-xdvi|.

								*b:outdir*
let b:outdir=fnameescape(fnamemodify(resolve(expand("%:p")),":h")) . "/"
Used by ViewOutput(), TEX(), VTEX(), BibTeX(), TexLog(), Pdffonts(), Delete() 
			i.e. in all functions.

	This is the directory in which tex will put the output files. If the
	open file is not a symbolic link it is equal to the directory in which
	the tex file is located. If the open file is a symbolic link it points
	to the directory in which the real file is located. 
	
	If you set this variable to './' (or '.') and change the current
	working directory for example to /tmp (:cd /tmp) then the latex output
	will be placed in /tmp, i.e. it will move with with cd. However, the
	default value of b:outdir is not affected by :cd command.

	White spaces and other characters should not be escaped. It will be
	quoted in '...' using the |shellescape()| function.

	You can see the current output directory in the status (it is in short
	notation) to see it whole type
		:echo b:outdir
	or use the function ShowOptions() (see |apt-ShowOptions()|).		

								*atp-g:texmf*
let g:texmf=$HOME/texmf
	This variable configures where input files are placed. See
	|atp-EditInputFile()|.

let g:askforoutdir=0						*g:askforoutdir*
	Its values are 1 and 0.  When it is set to 1 you will be asked for the
	name of a directory where tex will put output files, note that this
	name should end with a "/".

let b:Viewer="xpdf"						*b:Viewer*
	it was tested with xpdf, evince, epdfviewer, kpdf, okular, xdvi and
	they all works fine.  I'm using xpdf and the xpdf server options are
	supported so that the file is automatically reloaded (other viewers,
	except epdfview, have this functionality as well, except acroread in
	which somehow it do not works. Read more about viewers in
	|atp-viewers|. 

let b:XpdfOptions=""						*b:XpdfOptions*
	Used by function: ViewOutput() (map \v, map <F3>, imap <F3>)

	For example if you want to have different look of one document you can
	set it to "-bg gray20". Other example:

	let b:XpdfOptions="-bg Grey30 -mattecolor SlateBlue3 -papercolor SlateBlue4"

	If you want this option to work in new open buffers put this in your
	$VIMRC file:

	au BufRead *.tex let b:XpdfOptions="-bg NavajoWhite4 -fg black -mattecolor burlywood"

let b:XpdfServer=fnamemodify(expand("%"),":t")			*b:XpdfServer*	
	Used by function: ViewOutput() (map \v, map <F3>, imap <F3>)

	that is it is equal to the name of your open file. You do not need
	escape spaces in the name (shellescape() function is used before it is
	send to your shell).

let b:openviewer=1						*b:openviewer*
	If the function which calles TeX compiler do not see that you are
	viewing the output file it will open it for you if b:openviewer=1.
	Otherwise, this feature is disabled.

let g:rmcommand="perltrash"					*g:rmcommand*
	Used by function: Delete() (map <F6>d imap <F6>d)	

	If you have another trash can program you can use it here, if you do
	not have it you can use "rm" (at your own risk). Now, it is used to
	delete the files produced by (La)TeX by the function Delete() (see
	|apt-Delete()|). It will remove all files in the output directory (see
	|b:outdir|), which ends with
	an extension defined in the list g:texextensions  
	
	If you set 
		let g:rmcommand=""
	then the function Delete() (see |apt-Delete()|) will use the vim
	|delete()| command, and will delete only the files produced by the
	current .tex file. The temporary directory is cleared by rm command.

	The program 'perltrash' is in the package app-misc/perltrash (at least
	for Gentoo)

								*g:texextensions*	
let g:texextensions=["aux", "log", "bbl", "blg", "spl", "snm", "nav", "thm", "brf", "out", "toc", "mpx", "idx", "maf", "blg", "glo", "mtc[0-9]", "mtc1[0-9]"]	
	 These list is used by the function Delete() (see |apt-Delete()|)
	 which delets all the file with this extension in the directory
	 b:outdir, unless g:rmcommand="" (see |g:rmcommand|) whene Delete()
	 deletes only the output files for the current buffer.
									
let g:keep=["log","aux","toc","bbl"]				*g:keep*
	
	Files with this extension will be copied from 'b:outdir' to the
	temporary directory with appropriate name to be used when (La)TeX is
	compiling. (log file will be only copied after it is created, other
	files will be copied back and forth between you 'b:outdir' and the
	temporary directory). These four are essentially minimum to work with 
	table of contents and bibtex, possibly other classes like beamer or
	packages like theorem (produced .thm files) have more special needs.
	You can change this variable by the command:
		:let g:keep+=["thm","spl"]
								
let g:printeroptions=""						*g:printeroptions*
	You can set the printer options. These are options for the lpr
	command, which will print the output file (pdf or dvi) this depends on
	the b:texcompiler that you use.

b:texcommand							*b:texcommand*
	This variable is for debugging, it stores the last executed command to
	compile your document. This changes also when your compiler was run
	automatically.>
		:TEX
		:echo b:texcommand
		:TEX 2
		:echo b:texcommand
<		
		
g:defaultbibflags		see |atp-bibflags:default|
g:defaultallbibflags		see |atp-bibflags:all|
b:lastbibflags			see |atp-bibflags:last|

b:bibfiles			see |atp-variables-bib|
s:bibfiles
s:allbibfiles
s:notreadablebibfiles
	For more on bib flags see |atp-bibsearch-flags|.
	

================================================================================
Mappings and Commands                     		*atp-mappings*

Lots mappings which are given here uses # which is in a convenient place on
British keyboards, but not in the US layout, you can change them for '`' or
some other key that it is not used in vim (there are not many of them
though). The most commonly used latex-suite plugin uses similar set of
mappings (but there might be some differences).

These mappings are loaded unless you set one of variables: 'no_plugin_maps' or
'no_atp_maps'.

Note: in all mappings "\" is really set to your <LocalLeader> (and thus, in
fact, the mapping can differ).

ShowOptions						*atp-map-ShowOptions()*
:ShowOptions, :ShowOptions v

TEX()							*atp-map-TEX()*
map \l,imap \l, :TEX 

VTEX()							*atp-map-VTEX()*
map <F5>,imap <F5>, :VTEX 

ViewOutput()						*atp-map-ViewOutput()*
map \v,map <F3>, imap \v, imap <F3>  

Bibtex()						*atp-map-Bibtex()*
map \b, :Bibtex

SimpleBibtex()						*atp-map-SimpleBibtex()*
map \sb, :SBibtex

OpenLog()						*atp-map-OpenLog()*
map <F6>l, imap <F6>l

Delete()						*atp-map-Delete()*
map <F6>d

Print()							*atp-map-Print()*
map \p
	This calls the function Printer(g:printeroptions) (see |Print()|).

							*atp-map-TOC*
:TOC
map T
	This is a mapping to the command ':TOC'

							*atp-map-Labels*
:Label
map \L
	This is a mapping to the command ':Labels'

							*atp-map-UpdateLabels()* 
:call UpdateLabels(bufname)	
map \UL			<-- is mapped to UpdateLabels(bufname("%"))

								

texdoc:							*atp-map-texdoc*
<F1> 	   
	This is both map and imap. Then you have to type what you are looking
	for and press enter. The option 'keywordprg' is set to 'texdoc -m', i.e
	when your curosr is over a package name and you press 'K' key then you
	should see the package document file (if it is named after the
	package).

	Note: if you are using: 
		au! BufWinEnter *.tex silent loadview
		au! BufWinLeave *.tex mkview
	in your $VIMRC file, you will need to change this option in all
	~/.vim/view/*.tex= files. To check if this option was set from a view
	file type 
		:verbose set keywordprg?
	Type in your terminal 
		vim ~/.vim/view/*.tex=
	then issue the command
		:bufdo %s/setlocal keywordprg=\p*/setlocal keywordprg=texdoc\ -m/g | w
		

texloganalyzer mappings:				*atp-texlog* *atp-texloganalyzer*			
<F6>+w			to see all warnings
<F6>+r			to see warnings coming from references 
<F6>+f			to see font warnings

this is not a texloganalyzer mapping but it is a good place to mention it:
<F6>+l			to open log file in another tab
			this is a mapping to a function called |OpenLog()|.

								
pdffonts is mapped to <F6>+g				*atp-pdffonts*

" FONT COMMANDS
imap ##rm \textrm{}<Left>
imap ##it \textit{}<Left>
imap ##sl \textsl{}<Left>
imap ##sf \textsf{}<Left>
imap ##bf \textbf{}<Left>
	
imap ##mit \mathit{}<Left>
imap ##mrm \mathrm{}<Left>
imap ##msf \mathsf{}<Left>
imap ##mbf \mathbf{}<Left>

							*atp-mappings-greek-letters*
" GREEK LETTERS
imap #a \alpha
imap #b \beta
imap #c \chi
imap #d \delta
imap #e \epsilon
imap #f \phi
imap #y \psi
imap #g \gamma
imap #h \eta
imap #k \kappa
imap #l \lambda
imap #i \iota
imap #m \mu
imap #n \nu
imap #p \pi
imap #o \theta
imap #r \rho
imap #s \sigma
imap #t \tau
imap #u \upsilon
imap #vs \varsigma
imap #vo \vartheta
imap #w \omega
imap #x \xi
imap #z \zeta

Not all upper Greek letters are in LaTeX:
imap #D \Delta
imap #Y \Psi
imap #F \Phi
imap #G \Gamma
imap #L \Lambda
imap #M \Mu
imap #N \Nu
imap #P \Pi
imap #O \Theta
imap #S \Sigma
imap #T \Tau
imap #U \Upsilon
imap #V \Varsigma
imap #W \Omega

								*atp-mappings-environments*
imap [b \begin{}<Left>
imap [e \end{}<Left>
inoremap [s \begin{}<CR>\end{}<Up><Right>

inoremap ]c \begin{center}<Cr>\end{center}<Esc>O
inoremap [c \begin{corollary}<Cr>\end{corollary}<Esc>O
inoremap [d \begin{definition}<Cr>\end{definition}<Esc>O
inoremap ]e \begin{enumerate}<Cr>\end{enumerate}<Esc>O
inoremap [q \begin{equation}<Cr>\end{equation}<Esc>O
inoremap [a \begin{align}<Cr>\end{align}<Esc>O
inoremap [x \begin{example}<Cr>\end{example}<Esc>O
inoremap ]q \begin{equation}<Cr>\end{equation}<Esc>O
inoremap ]l \begin{flushleft}<Cr>\end{flushleft}<Esc>O
inoremap ]r \begin{flushright}<Cr>\end{flushright}<Esc>O
inoremap [i \item  
inoremap ]i \begin{itemize}<Cr>\end{itemize}<Esc>O
inoremap [l \begin{lemma}<Cr>\end{lemma}<Esc>O
inoremap [n \begin{note}<Cr>\end{note}<Esc>O
inoremap [o \begin{observation}<Cr>\end{observation}<Esc>O
inoremap ]p \begin{proof}<Cr>\end{proof}<Esc>O
inoremap [p \begin{proposition}<Cr>\end{proposition}<Esc>O
inoremap [r \begin{remark}<Cr>\end{remark}<Esc>O
inoremap [t \begin{theorem}<Cr>\end{theorem}<Esc>O
imap 	 ]t \begin{center}<CR>\begin{tikzpicture}<CR><CR>\end{tikzpicture}<CR>\end{center}<Up><Up>

								*atp-mappings-other*
These are very useful mappings for typing mathematics:
imap __ _{}<Left>
imap ^^ ^{}<Left>
imap [m \[\]<Left><Left>

================================================================================
Error Handling							*atp-errors*
	
This plugins sets the option 
	set errorfile=  log file in your b:outdir directory
This allows you to use |quickfix| commands, for example to read the error file
use :cg (see |cg|), to jump to the first error :cf (see |cg|), to list all
errors :cl (see |cl|), read |errorformat| if you want to change the output of
this commands.

								*atp-errors-bibsearch*
A possible error which may accour using the :BibSearch commands has a simple
cause: we count number of brackets '()', '{}' and '"' (but nor '\"') to see
where the bibentry ends and where to join lines. The message error is echoed
when more than 30 lines where processed and the matching bracket was not found
(or the number of '"' is odd). Look at your bib file at the specified position.
Syntax highlighting for bib files can help you finding where such an error is
located. (After reading the bibfile comment lines and lines which begin with
@string are removed, so that the brackets in comment lines do not count.)

================================================================================
Requirements							*atp-requirements*

This plugin requires vim version higher than 7, however a some simple changes
can make it run on older versions as well (the 'source code' uses lists /g:keep
and let g:texextensions are the only ones). 

It is nice to have 'texdoc' program. This plugin maps <F1> to :!texdoc -m ...
and allows to speed up your searches. Also the option 'keywordprg' has the
value "texdoc -m", thus pressing 'K' (see |K|) over a texpackage should open
you the package documentation. It is also a good advice to install help
files of latex-suite, you can find there a big part of 'Non so short
introduction to Latex' by Tobias Oetiker (copy them to your ~/.vim/doc
document then use |:helptags| to install the helptags :helptags ~/.vim/doc and
that's it). The same applies to this help file.

Another good programs are texloganalyzer and pdffonts wchich are not required
by there are some mappings to defined (see |texlog| and |pdffonts|).

================================================================================
Notes on Viewers                               			*atp-viewers*

xpdf	
	It is fully supported. It is configured in the way that when your tex
	file have errors, xpdf viewer will not reload your file, which I found
	useful. 

	You can set your own options of xpdf using b:XpdfOptions, for example
		let b:XpdfOptions="-bg grey20"
	will make xpdf view different. This is helpfull when you edit to
	files, and do not want to xpdf mix them. Other useful options are
	'-papercolor' and '-mattecolot' for example
	    let b:XpdfOptions="-bg Grey30 -mattecolor SlateBlue3 -papercolor SlateBlue4"
	for something which is more eye friendly.	
evince
	Works fine.
okular
kpdf
	Works fine (moves page a little bit when updates a file).
epdfview
	This viewer does not support automatic reloads when the file
	changes (but it seems that the work is in progress). You have to
	issue CTRL-R yourself when the file is changed.
acroread
	As with epdfview (with the difference that it supports automatic
	updates, but it do not works somehow)
								*atp-xdvi*
xdvi
	Works fine. You can set reverse searching (i.e. position vim's cursor
	after xdvi event: usually CTRL+Left Mouse)  with this options:

	let b:texcompiler="latex"
	let b:texoptions="-src-specials"
	let b:Viewer="xdvi -editor 'gvim --remote-wait +%l %f'"

	See vim tip at: http://vim.wikia.com/wiki/Vim_can_interact_with_xdvi 	

	For inverse searching (position xdvi according to the vims cursor
	position) you can set:
>
 "	let b:inverse_search="xdvi -sourceposition " . line(".") . ":" . col(".") . expand("%") . " " . fnamemodify(expand("%"),":r") . ".dvi"
<
	To make an inverse search:
>
 "		:call system(b:inverse_search)
<
	And xdvi will place itself where your tex file is opened.  You can
	make a map for this. At some stage it will be included in this plugin,
	but I want to include also inverse and reverse searching using pdf
	viewers.

	To use this with vim rather than gvim one have to add servername. Run
	vim as:
>
 " 	vim --servername vimtex
 " 	let b:Viewer="xdvi -editor 'vim --servername " . v:servername . " --remote-wait +%l %f'"
 "
 "	let b:inverse_search="xdvi -editdor 'vim --servername " . v:servername "' -sourceposition " . line(".") . ":" . col(".") . expand("%") . " " . fnamemodify(expand("%"),":r") . ".dvi"
<

================================================================================
Color highliting and syntax groups				*atp-color-highlight*

There is a color scheme included: coots-beauty-256 you need 256 colors to use
it. These are the highlights groups defined for various files:

1) ToC file
    highlight atp_linenumber
    highlight atp_number
    highlight atp_chapter
    highlight atp_section
    highlight atp_subsection
    highlight atp_abstract
	*this group highlights abstrac, all the unnubered chapters and
	bibliography.

    The chapter group highlights or chapters, or sections, or parts, depending
    what is your top level section in your latex document. This applies,
    accordingly, to other groups.

2) Labels file
    highlight atp_label_filename
    highlight atp_label_linenr
    highlight atp_label_name 

3) BibSearch file
    this is very much the same as the standard syntax for bib files. Groups are
    named bibsearch<NAME> instead of bib<NAME>. There is one more group added:
>
 "    bibsearchInfo
<
    which highlights the line number of the bib entry in the bib file.  All
    bibsearch groups are by default linked to the bib groups.

    Yet, there is no default highlighting, try coots-beauty-256 color scheme.
    If you like it, I'm glad, if you have a nice (non standard) color scheme,
    I'm happy to get it, if you like to share it.

================================================================================
Final Remarks                               			*atp-remarks*
	
	To see some messages that are issued you can use :messages command
	(see |:mes|).

	If you find this plugin useful and have some comments you are
	cordially invited to write to the author: <mszamot@gmail.com>.

	There are other ways to make such an automatic plugin. The crucial
	step is to make the plugin know that tex is already in use (if you run
	to tex compilers on the same file at the same time the effect won't be
	good).

	For several month I was using a different code which was not using
	temporary copies but was checking if the tex is running or not. It was
	working very good but I didn't understand why (silly isn't it), and
	when I started making changes it stopped working: the issue is that
	it is difficult to make a function sleep until tex stops working not
	putting whole vim into sleep - this is the time that we want to save.
	However, the advantage of using temporary files is smoothness (changes
	appear faster in the output file). 

	Best regards, and hopefully you will find this useful :) 
	Marcin Szamotulski
	
	
================================================================================
Copy Rights							*atp-copy-rights*


" Copyright:    Copyright (C) 2010 Marcin Szamotulski Permission is hereby
"		granted to use and distribute this code, with or without
"		modifications, provided that this copyright notice is copied
"		with it. Like anything else that's free, Automatic TeX Plugin
"		is provided *as is* and comes with no warranty of any kind,
"		either expressed or implied. By using this plugin, you agree
"		that in no event will the copyright holder be liable for any
"		damages resulting from the use of this software.


vim:tw=78:ts=8:ft=help:norl:
